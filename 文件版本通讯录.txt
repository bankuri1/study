写一个头文件："contact.h"
#ifndef __CONTACT_H_  
#define __CONTACT_H_  
#define _CRT_SECURE_NO_WARNINGS 1  
#include<stdio.h>  
#include<stdlib.h>  
#include<string.h>  
#define EXPAND 100  
#define MAX_INIT 500  
#define MAX_END 1000  
typedef enum Number  
{  
    Exit,  //实际上是对一个变量取值范围的限定，花括号内则是它的取值范围\   
    //如果不赋值，会从赋初值的常量开始依次加一，如果都没有赋值则\   
    //          从0开始依次加一   
    Add,  
    Delete,  
    Find,  
    Empty,  
    Modify,  
    Sort,  
    Show,  
} Number_Val;  
typedef struct Personal  
{  
    char name[30];  
    char gender[10];  
    int age;  
    int telephone;  
    char address[100];  
  
}Personal, *personal;  
typedef struct Contacts  
{  
    Personal *data;    //所有联系人的信息，定义一个指向Personal结构体的指针   
    int size;          //当前联系人的个数   
    int capacity;  
  
}Contact, ** contact;  
void meau();  
void Init(contact p);  
void judge_full(contact p); // 判断是当前申请的容量否已满，如果满了动态分配内存，关于realloc函数的用法这里就不再说了  
void Add_linkman(contact p);//添加联系人的函数，在添加之前要先调用void judge_full(contact p)这个函数判断是否进行扩容  
void Save_contact(contact p);//将联系人的信息保存到文件中这里也可以不声明，因为在void Destory(Contact *p)函数内部调用的  
void Load_contact(contact p);//将联系人的信息从保存的文件中读取出来，即在初始化函数内部调用这里也可以不用声明  
void Destory(Contact *p);//这是一个释放内存的函数在释放之前先将信息保存到文件中  
int  Find_linkman(contact p, char *str);//查找联系人的函数，通过对联系人姓名的查找确定是否找到该联系人  
void Delete_linkman(contact p);//删除联系人的函数，通过对联系人姓名的查找确定是否找到该联系人然后再删除  
void Empty_linkman(contact p);//清空函数  
void Modify_linkman(contact p);//修改联系人的函数先找到再修改  
void show(contact p); //显示所有联系人的函数  
void bubbleSort(contact p);//通过对联系人姓名进行排序  
#endif
测试函数："test.c"
[csharp] view plain copy 在CODE上查看代码片派生到我的代码片
<span style="font-size:14px;">#include"contact.h"  
int main()  
{    
    meau();  
    Contact *q;  
    Init(&q);  
    int input = 0;  
    while (1)  
    {  
        printf("请输入一个数字进行选择:");  
        scanf("%d", &input);  
        switch (input)  
        {  
  
  
        case Exit:   
                    Destory(q);   
                    exit(1);  
                    break;  
        case Add:    Add_linkman(&q); printf("\n"); break;  
        case Delete:  {  
                           
                          Delete_linkman(&q); printf("\n"); }break;  
  
        case  Find:   {  
                          char name[30];  
                          scanf("%s", name);  
                          Find_linkman(&q, name); }; printf("\n"); break;  
  
        case Modify:Modify_linkman(&q); printf("\n"); break;  
        case Show:show(&q); printf("\n"); break;  
        case Empty:Empty_linkman(&q); printf("\n"); break;  
        case Sort:bubbleSort(&q); printf("\n"); break;  
        default:printf("输入错误！！！");  
  
        }  
    }  
    system("pause");  
    return 0;  
} 

函数的具体实现：
#include"contact.h"  
void meau()  
{  
    printf("             *******************************************\n");  
    printf("             *******************************************\n");  
    printf("             ##############My address book##############\n");  
    printf("             *1-Add       2-Delete       3-Find        *\n");  
    printf("             *4-Empty     5-Modify       6-Sort        *\n");  
    printf("             *0-Exit                     7-Show        *\n");  
    printf("             *******************************************\n");  
    printf("             *******************************************\n");  
}  
void judge_full(contact p)  
{  
  
    if ((*p)->size == (*p)->capacity)  
    {  
        Personal *temp = (Personal *)realloc((*p)->data, (sizeof(Personal))*((*p)->capacity+EXPAND));  
        if (temp == NULL)  
        {  
            perror("fopen");  
        }  
        else  
        (*p)->data = temp;  
        (*p)->capacity += EXPAND;  
          
    }  
}  
void Save_contact(contact p)  
{  
    int i = 0;  
    FILE *pfwrite = fopen("contact.txt", "wb");//以二进制流的方式写入  
    if (pfwrite == NULL)  
    {  
        perror("fopen");  
        exit(1);  
    }  
    for (i = 0; i <(*p)->size; i++)  
    {  
        fwrite(&((*p)->data[i]), sizeof(Personal), 1, pfwrite);  
          
    }  
    fclose(pfwrite);//在每次程序退出之前可以将联系人的信息保存到文件中  
}  
void Load_contact(contact p)//在初始化函数里调用则可以不用添加信息就能读出文件里保存的联系人  
{  
    int i = 0;  
    Personal tmp;  
    FILE *pfread = fopen("contact.txt", "rb");//以二进制流的方式读  
    if (pfread == NULL)  
    {  
        perror("fopen");  
        exit(1);  
    }  
    for (i = 0;(fread(&tmp, sizeof(Personal), 1, pfread))==1; i++)//fread会返回实际读取的count数  
    {  
        judge_full(p);  
        (*p)->data[i] = tmp;  
        (*p)->size++;  
    }  
}  
void Init(contact p)    //使用二级指针传参的方式在释放内存的时候不会造成内存的泄漏问题  
{  
    (*p) = (Contact *)malloc(sizeof(Contact));  
    if (*p == NULL)  
    {  
        printf("out of memory");  
        exit(1);  
    }  
    (*p)->data = (Personal *)malloc(sizeof(Personal)*MAX_INIT);  
    if ((*p)->data == NULL)  
    {  
        printf("out of memory");  
        exit(1);  
    }  
    else  
    (*p)->size = 0;    //初始化时联系人个数为0   
    (*p)->capacity = MAX_INIT;  
    Load_contact(p);  
}  
void Destory(Contact *p)  
{  
    Save_contact(&p);  
    free(p->data);  
    p->data = NULL;  
    p->capacity = 0;  
    p->size = 0;  
    free(p);  
    p = NULL;  
      
}  
void Add_linkman(contact p)  
{  
    judge_full(p);  
    printf("请输入姓名:");  
    scanf("%s", (*p)->data[(*p)->size].name);//p->data一个指向Personal结构体的指针   
    // p->size联系人的个数其实相当于数组的\   
    //下标访问模式即输入的表示第几个联系人的信息\   
    // 不能写成p->data.name         
    printf("请输入姓别:");  
    scanf("%s", (*p)->data[(*p)->size].gender);  
    printf("请输入年龄:");  
    scanf("%d", &(*p)->data[(*p)->size].age);  
    printf("请输入电话:");  
    scanf("%d", &(*p)->data[(*p)->size].telephone);  
    printf("请输入地址:");  
    scanf("%s", (*p)->data[(*p)->size].address);  
    (*p)->size++;  
}  
int  Find_linkman(contact p, char *str);  
void Swap(Personal *x, Personal *y)  
{  
    Personal temp;  
    temp = *x;  
    *x = *y;  
    *y = temp;  
}  
void Delete_linkman(contact p)//删除一个联系人的信息其实就是,j信息的覆盖,后一个信息覆盖要删除的信息的位置   
{  
    /*int i = 0; 
    printf("请输入你要删除的联系人的信息："); 
    char name[30]; 
    scanf("%s", name); 
    int ret = Find_linkman(p, name); 
    if (ret != -1) 
    { 
        for (i = ret; i < (*p)->size; i++) 
        { 
            (*p)->data[i] = (*p)->data[i + 1]; 
        } 
        (*p)->size--; 
    } 
    else 
        printf("该联系人不存在");*/  
    //{注释掉的代码为其中的一种删除方式比较笨拙，可以直接通过要删除的联系人和最后一个联系人进行交换然后长度减一进行删除}  
    int i = 0;  
    printf("请输入你要删除的联系人的信息：");  
    char name[30];  
    scanf("%s", name);  
    int ret = Find_linkman(p, name);  
    if (ret != -1)  
    {  
        int pos = (*p)->size;  
        Swap(&((*p)->data[ret]), &((*p)->data[pos - 1]));//将要删除的联系人和当前最后一个联系人交换  
        ((*p)->size)--;//交换完成后size-1;  
    }  
    else  
        printf("不存在该联系人");  
}  
int  Find_linkman(contact p, char * str)  
{  
    int i = 0;  
    for (i = 0; i < (*p)->size; i++)  
    {  
        if (strcmp((*p)->data[i].name, str) == 0)  
        {  
            printf("存在该联系人");  
            return i;//存在则返回对应的下标   
        }  
    }  
    printf("不存在该联系人");  
    return -1;  
}  
void Empty_linkman(contact p)  
{  
    (*p)->size = 0;  
}  
void Modify_linkman(contact p)  
{  
    printf("请输入你要修改的联系人的信息：");  
    char name[30];  
    scanf("%s", name);  
    int ret = Find_linkman(p, name);  
    if (ret != -1)  
    {  
        printf("请输入你要修改的联系人的name：");  
        scanf("%s", (*p)->data[ret].name);  
        printf("请输入你要修改的联系人的gender：");  
        scanf("%s", (*p)->data[ret].gender);  
        printf("请输入你要修改的联系人的age：");  
        scanf("%d", &(*p)->data[ret].age);  
        printf("请输入你要修改的联系人的telephone：");  
        scanf("%d", &(*p)->data[ret].telephone);  
        printf("请输入你要修改的联系人的address：");  
        scanf("%s", (*p)->data[ret].address);  
    }  
}  
void show(contact p)  
{  
    int i = 0;  
    for (i = 0; i < (*p)->size; i++)  
    {  
        printf("name:%s gender:%s age:%d telephone:%d address:%s", \  
            (*p)->data[i].name, (*p)->data[i].gender, (*p)->data[i].age, (*p)->data[i].telephone, (*p)->data[i].address);  
        printf("\n");  
    }  
  
}  
//void bubbleSort(contact p)  
//{  
//  
//  int i = 0;  
//  for (; i < (*p)->size - 1; i++){  
//      int j = 0;  
//      int flag = 0;  
//      for (j=0; j < (*p)->size - 1 - i; j++)  
//      {  
//          if (strcmp((*p)->data[j].name, (*p)->data[j + 1].name)>0)  
//          {  
//              Personal temp = (*p)->data[j];  
//              (*p)->data[j] = (*p)->data[j + 1];  
//              (*p)->data[j + 1] = temp;  
//              //这是将两个结构体之间进行交用   
//              //创建一个临时结构体的方式变量的方式交换   
//          }  
//          flag = 1; //如果一次都没有进行交换则直接跳出循环   
//      }  
//      if (!flag)  
//          break;  
//  }  
//  
//}  
//这是采用冒泡排序法，我么也可以使用快排函数直接对字符串排序，接下来我们使用使用qsort函数  
int My_cmp(void *x, void *y)  
{  
    return strcmp(((Personal*)x)->name,((Personal*)y)->name);//对结构体进行排序因此先强制转换成结构体指针直接调用strcmp函数  
}  
void bubbleSort(contact p)  
{  
    qsort((*p)->data, ((*p)->size), sizeof(Personal), My_cmp);//对当前所有成员排序因此第一个参数为指向Personal结构体的指针，总大小为 ((*p)->size)个，每个结构体所占字节数为sizeof(Personal)  
}  